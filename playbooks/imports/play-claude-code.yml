- hosts: desktop
  name: Claude Code Installation
  become: false
  vars:
    root_dir: "{{ inventory_dir }}/../../"
    claude_code_version: "latest"
  tasks:
    - name: Verify NVM and Node.js are Available
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1
      environment:
        HOME: "/home/{{ user_login }}"
      register: node_check
      failed_when: node_check.rc != 0
      changed_when: false

    - name: Display Node.js Version for Claude Code
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        echo "Node.js: $(node --version)"
        echo "NPM: $(npm --version)"
      environment:
        HOME: "/home/{{ user_login }}"
      register: node_versions
      changed_when: false

    - name: Show Node.js Environment
      debug:
        msg: "{{ node_versions.stdout_lines }}"

    - name: Install Claude Code Dependencies (System Level)
      become: true
      package:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - ripgrep
          - bat
          - fd-find
          - fzf
          - tree
          - jq
          - curl
          - wget
          - git
          - openssh-clients

    - name: Check if YQ is Already Installed
      stat:
        path: /usr/bin/yq
      register: yq_installed

    - name: Install YQ (YAML processor)
      become: true
      shell: |
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        chmod +x /usr/bin/yq
      when: not yq_installed.stat.exists

    - name: Install Claude Code CLI via NPM
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        npm install -g @anthropic/claude-code@{{ claude_code_version }}
      environment:
        HOME: "/home/{{ user_login }}"
      args:
        creates: "/home/{{ user_login }}/.npm-global/bin/claude"

    - name: Verify Claude Code Installation
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        export PATH="$HOME/.npm-global/bin:$PATH"
        claude --version
      environment:
        HOME: "/home/{{ user_login }}"
      register: claude_code_version_check
      changed_when: false

    - name: Display Claude Code Version
      debug:
        msg: "Claude Code installed successfully: {{ claude_code_version_check.stdout }}"

    - name: Create Claude Code Configuration Directory
      file:
        path: "/home/{{ user_login }}/.config/claude-code"
        state: directory
        owner: "{{ user_login }}"
        group: "{{ user_login }}"
        mode: '0755'

    - name: Configure Claude Code Shell Integration
      blockinfile:
        path: "/home/{{ user_login }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED: Claude Code Integration"
        block: |
          # Claude Code CLI alias
          alias cc='claude update && claude'
        create: false

    - name: Install Additional Development Tools for Claude Code
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        npm install -g \
          typescript \
          eslint \
          prettier \
          @types/node
      environment:
        HOME: "/home/{{ user_login }}"
      args:
        creates: "/home/{{ user_login }}/.npm-global/lib/node_modules/typescript"


    - name: Final Claude Code Installation Verification
      shell: |
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        export PATH="$HOME/.npm-global/bin:$PATH"
        echo "=== Claude Code Installation Summary ==="
        echo "Claude Code Version: $(claude --version)"
        echo "Node.js Version: $(node --version)"
        echo "NPM Version: $(npm --version)"
        echo "Dependencies Available:"
        echo "  - ripgrep: $(rg --version | head -1)"
        echo "  - bat: $(bat --version | head -1)"
        echo "  - fd: $(fd --version)"
        echo "  - fzf: $(fzf --version)"
        echo "  - jq: $(jq --version)"
        echo "  - yq: $(yq --version)"
        echo "Installation completed successfully!"
      environment:
        HOME: "/home/{{ user_login }}"
      register: final_verification
      changed_when: false

    - name: Display Installation Summary
      debug:
        msg: "{{ final_verification.stdout_lines }}"